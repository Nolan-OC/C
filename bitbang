#define SBAUD 9600


#define CS 2
#define SK 3
#define DI 4
#define DO 5

#define DBG 10
#define DBG2 11

#define CMDMSK 0x200

void cmdout(int cmd, int msk){
  byte j;
  for(j=0; j<10; j++){
    if(cmd & msk){
      digitalWrite(DI,HIGH);
    } else {
      digitalWrite(DI,LOW);
    }
    digitalWrite(SK, HIGH);  // clock data into NV
    cmd = cmd<<1;
    digitalWrite(SK, LOW);
  }
}

int datin(byte cnt){
  int v;
  byte j;
  v=0;
  for(j=0; j<cnt; j++){
    v = v<<1;
    digitalWrite(SK,HIGH);
    v = v | digitalRead(DO);
    digitalWrite(SK,LOW);
  }
  return v;
  
}

void datout(int v, byte cnt){
  byte j;
  int msk;
  msk=0x8000;  // d15 msk
  if (cnt==8) msk=0x80;  // d7 msk
  for(j=0; j<cnt; j++){
    if(v & msk){
      digitalWrite(DI,HIGH);
    } else {
      digitalWrite(DI,LOW);
    }
    digitalWrite(SK, HIGH);  // clock data into NV
    v = v<<1;
    digitalWrite(SK, LOW);
    
  }
}

void NV_wral(int v){
  int cmd;
  cmd = 0x220;
  digitalWrite(CS,HIGH);
  cmdout(cmd, CMDMSK);
  datout(v, 8);  
  digitalWrite(CS,LOW);
  digitalWrite(CS,HIGH);
  while( 0 == digitalRead(DO));
  digitalWrite(CS,LOW);
}

void NV_ewds(){
  int cmd;
  cmd = 0x200;
  digitalWrite(CS,HIGH);
  cmdout(cmd, CMDMSK);
  digitalWrite(CS,LOW);
}

void NV_ewen(){
  int cmd;
  cmd = 0x260;
  digitalWrite(CS,HIGH);
  cmdout(cmd, CMDMSK);
  digitalWrite(CS,LOW);
}

void NV_eral(){
  int cmd;
  cmd = 0x240;
  digitalWrite(CS,HIGH);
  cmdout(cmd, CMDMSK);
  digitalWrite(CS,LOW);
  digitalWrite(CS,HIGH);
  while( 0 == digitalRead(DO));
  digitalWrite(CS,LOW);
  
}


int NV_read(byte adr){
  int cmd;
  int v;
  cmd = 0x300 + adr;
  digitalWrite(CS,HIGH);
  cmdout(cmd, CMDMSK);
  v = datin(8);  
  digitalWrite(CS,LOW);
  return v;
}

void NV_write(byte adr, int v){
  int cmd;
  cmd = 0x280 + adr;
  digitalWrite(CS,HIGH);
  cmdout(cmd, CMDMSK);
  datout(v,8);  
  digitalWrite(CS,LOW);
  digitalWrite(CS,HIGH);
  while( 0 == digitalRead(DO));
  digitalWrite(CS,LOW);
  
}

void NV_erase(byte adr){
  int cmd;
  cmd = 0x380 + adr;
  digitalWrite(CS,HIGH);
  cmdout(cmd, CMDMSK);
  digitalWrite(CS,LOW);
  digitalWrite(CS,HIGH);
  while( 0 == digitalRead(DO));
  digitalWrite(CS,LOW);
  
}

void setup() {
    pinMode(DBG, OUTPUT);
    pinMode(DBG2, OUTPUT);
    
    pinMode(CS, OUTPUT);
    pinMode(SK, OUTPUT);
    pinMode(DI, OUTPUT);
    pinMode(DO, INPUT_PULLUP);
    Serial.begin(SBAUD);
    Serial.print("\nCold Boot\n");
    digitalWrite(CS, LOW);
    digitalWrite(SK, LOW);
    digitalWrite(DI, LOW);
    
}
void loop() {
  int bug=0;
  char ch;
  int x;
  int v;
  
  Serial.println(F("\n\n93c46 Test Menu"));
  Serial.println(F("1 - READ 8 bytes"));
  Serial.println(F("2 - EWEN Write Enable"));
  Serial.println(F("3 - EWDS Write DISable"));
  Serial.println(F("4 - WRAL 0xA5"));
  Serial.println("5 - ERAL Erase ALL");
  Serial.println("6 - Write  0:12,34,56,78,9A,BC,DE,FA");
  Serial.println("7 - Write  0:22,44,66,88,AA,BB,CC,DD");
  Serial.println("8 - Erase  0, 3,4, 7");
//  Serial.println("");
  Serial.println("CDM: ");
  while(Serial.available()==0);  // wait for input
  ch= Serial.read();   // Note - Handle CR LF on input

  switch (ch) {
    
    case '1':
      Serial.print("Reading 8 Bytes");
      for(x=0; x<8; x++){
        v=NV_read(x);
        Serial.print("Read ");
        Serial.print(x);
        Serial.print(" : ");
        Serial.println(v, HEX);
      }
      break;
    case '2':
      Serial.print("EWEN Write Enable");
        NV_ewen();
      break;
    case '3':
      Serial.print("EWDS Write DISable");
        NV_ewds();
      break;
    case '4':
      Serial.print("WRAL Write ALL = 0xA5");
        NV_wral(0xA5);
      break;
    case '5':
      Serial.print("ERAL Erase ALL");
        NV_eral();
      break;
    case '6':
      Serial.print("Write  0:12,34,56,78,9A,BC,DE,FA");
        NV_write(0,0x12);
        NV_write(1,0x34);
        NV_write(2,0x56);
        NV_write(3,0x78);
        NV_write(4,0x9A);
        NV_write(5,0xBC);
        NV_write(6,0xDE);
        NV_write(7,0xFA);
      break;
    case '7':
      Serial.print("Write  0:22,44,66,88,AA,BB,CC,DD");
        NV_write(0,0x22);
        NV_write(1,0x44);
        NV_write(2,0x66);
        NV_write(3,0x88);
        NV_write(4,0xAA);
        NV_write(5,0xBB);
        NV_write(6,0xCC);
        NV_write(7,0xDD);
      break;
    case '8':
      Serial.print("Erase  0, 3,4, 7");
        NV_erase(0);
        NV_erase(3);
        NV_erase(4);
        NV_erase(7);
      break;
    default:
      break;
    
  }//switch
  digitalWrite(DBG, bug & 1);
  bug++;
}
