#define t_D13 1
#define t_LEDS 2
#define t_SET 3
#define t_STATUS 4
#define t_VERSION 5
#define t_HELP 6
#define t_ON 7
#define t_OFF 8
#define t_BLINK 9
#define t_GREEN 10
#define t_RED 11
#define t_NUM 12
#define t_LEDs 13
#define t_EOL 255

char inputBuffer[50];
int bufferIndex = 0;

int blinkInterval = 500;
unsigned long previousMillis = 0;
struct Light{
  byte pinNum;
  bool isOn;
  bool isBlink;
};
struct Light lights[2] = {
  {13, false, false}, // built in
  {11, false, false}, // LED is set to 11-red by default green would be 12
};
struct TokenEntry{
  char letterOne;
  char letterTwo;
  byte wordLen;
  byte tokenNum;
};

struct TokenEntry tokenTable[14] = {
  {'D','1', 3, 1 },
  {'L','E', 4, 2 },
  {'S','E', 3, 3 },
  {'S','T', 6, 4 },
  {'V','E', 7, 5 },
  {'H','E', 4, 6 },
  {'O','N', 2, 7 },
  {'O','F', 3, 8 },
  {'B','L', 5, 9 },
  {'G','R', 5, 10 },
  {'R','E', 3, 11 },
  {'N','U', 3, 12 },
  {'L','E', 4, 13 },
  {'E','O', 3, 255 },
};

void setInterval(int interval){
  blinkInterval = interval;
}

//change an LED's status
void manageLED(struct Light* ptr, bool on, bool isBlink){
  (*ptr).isOn = on;
  (*ptr).isBlink = isBlink;
  digitalWrite((*ptr).pinNum, on ? true : false);
}

//toggle an LED on or off depending on its current state
void toggleLight(struct Light* ptr){
  switch((*ptr).isOn){
    case true:
      manageLED(ptr, false, true);
      digitalWrite((*ptr).pinNum, LOW);
      break;
    case false:
      digitalWrite((*ptr).pinNum,HIGH);
      manageLED(ptr, true, true);
      break;
  }
}
//print the status of all LEDS
void statusLED(){
  Serial.println("\n-----LED Status-----");
  for(int i = 0; i < 2; i++){
    //pin num
    Serial.println(lights[i].pinNum == 13 ? "Digital Pin:" : "LED:");
    Serial.print("Pin: ");
    Serial.println(lights[i].pinNum);
    //on off
    Serial.print("Is On? ");
    Serial.println(lights[i].isOn ? "Yes" : "No");
    //blinking?
    Serial.print("Is Blinking? ");
    Serial.println(lights[i].isBlink ? "Yes" : "No");
    }
    Serial.print("\nCurrent BLINK interval set to ");
    Serial.println(blinkInterval);
    Serial.println("------------------\n");
}

void printHelp(){
  Serial.println("\n-----Helpful Commands-----");
  Serial.println("LED - followed by ON OFF GREEN RED or BLINK");
  Serial.println("D13 - followed by ON OFF or BLINK");
  Serial.println("VERSION - will print the current version");
  Serial.println("STATUS followed by LEDS - will print the status of all LEDs");
}

void readTokenBuffer(byte tokenBuffer[])
{
  switch(tokenBuffer[0]){
    case t_D13:
      switch(tokenBuffer[1]){
        case t_ON:
          //TURN D13 ON
          Serial.println("TURNING D13 ON");
          manageLED(&lights[0],true, false);
          break;
        case t_OFF:
          //TURN D13 OFF
          Serial.println("TURNING D13 OFF");
          manageLED(&lights[0],false, false);
          break;
        case t_BLINK:
          //SET D13 to BLINK
          Serial.println("TURNING D13 BLINK");
          manageLED(&lights[0],true, true);
          break;
        default:
          Serial.println("Please enter a valid command following D13");
          break;
      }
      break;
    case t_LEDS:
      switch(tokenBuffer[1]){
        case t_GREEN:
          Serial.println("SETTING LED GREEN");
          lights[1].pinNum = 12;
          digitalWrite(11,LOW);
          manageLED(&lights[1],lights[1].isOn,lights[1].isBlink);
          break;
        case t_RED:
          Serial.println("SETTING LED RED");
          lights[1].pinNum = 11;
          digitalWrite(12,LOW);
          manageLED(&lights[1],lights[1].isOn,lights[1].isBlink);
          break;
        case t_ON:
          Serial.println("TURNING LED ON");
          manageLED(&lights[1],true,lights[1].isBlink);
          break;
        case t_OFF:
          Serial.println("TURNING LED GREEN");
          manageLED(&lights[1],false,false);
          break;
        case t_BLINK:
          Serial.println("SETTING LED TO BLINK");
          manageLED(&lights[1],lights[1].isOn,true);
          break;
        
      }
      break;
    case t_SET:
      switch(tokenBuffer[1]){
        case t_BLINK:
            //reconstruct integer sent by token buffer
           int rec = (int)(((unsigned)tokenBuffer[2] << 8) | tokenBuffer[3] );
           Serial.print("Setting Blink Interval To: ");
           Serial.println(rec);
           blinkInterval = rec;
          break;
      }
      break;
    case t_STATUS:
      switch(tokenBuffer[1]){
        case t_LEDS:
          statusLED();
          break;
        default:
          Serial.println("Unrecognized Command. Did you mean to write STATUS LEDS ?");
          break;
      }
      break;
    case t_VERSION:
      Serial.println("Version: 1.0");
      break;
    case t_HELP:
      printHelp();
      break;
      }

  //clear token buffer
  tokenBuffer[0] = '\0';
}

void processInput()
{
  //print inputted string
  Serial.print("\nReceived Input: ");
  Serial.println(inputBuffer);

  //split char array into tokens
  byte tokenBuffer[50];
  byte tokenIndex = 0;
  byte wordIndex = 0;
  
  //parse out words from the input buffer
  for(int i = 0; i<sizeof(inputBuffer)/sizeof(inputBuffer[0]); i++)
  {
    char c = inputBuffer[i];
    
    //test if char is space, if it is we want to check for proper token
    // set up a nested loop where i is the index int of the stream and wordIndex points to the start of the current word
    if(c == 32 || c == '\0'){
      // if current word is token add to token buffer
      for(int t = 0; t < sizeof(tokenTable)/sizeof(tokenTable[0]); t++)
      {
        // check if first letter, second letter, and wordlengths all match up
        if(tokenTable[t].letterOne == inputBuffer[wordIndex] && 
        tokenTable[t].letterTwo == inputBuffer[wordIndex+1] && 
        tokenTable[t].wordLen == i - wordIndex){
          tokenBuffer[tokenIndex] = tokenTable[t].tokenNum;
          tokenIndex ++;
          break;
        }
      }
      wordIndex = i+1;

    // Get a substring of the next word which should be an integer indicating blink frequency
      if(tokenBuffer[tokenIndex] == t_BLINK && tokenBuffer[tokenIndex-1] == t_SET){
        char intAsArr[50];
        byte index = 0;
        bool spaceFound = false;
        for(int num = 0; num < 50; num ++){
          char currentChar = inputBuffer[wordIndex + num];
          if(currentChar == '\0' || (currentChar == ' ' && spaceFound)){
            intAsArr[index] = '\0';
            break;
          }
          else if (currentChar == ' ' && !spaceFound){
            spaceFound = true;
          }
          else if (spaceFound){
            intAsArr[index] = currentChar;
            index ++;
          }
        
      }
      intAsArr[index] = '\0';
      int result = atoi(intAsArr);
      byte high = (result >> 8) & 0xFF;
      byte low = result & 0xFF;
      tokenIndex++;
      tokenBuffer[tokenIndex] = high;
      tokenIndex++;
      tokenBuffer[tokenIndex] = low;
      tokenIndex++;
      int reassemble = (high<<8) | low;
      }

      //if the char is terminator end the sequence
      if(c == '\0'){
        bufferIndex = 0;
        inputBuffer[bufferIndex] = '\0';
        break;
      }
    }
  }
  //end and print the token buffer
  tokenBuffer[tokenIndex] = '\0';
  Serial.print("Token Buffer: ");
  for(int i = 0; i < sizeof(tokenBuffer)/sizeof(tokenTable[0]); i++)
  {
    if(tokenBuffer[i] == '\0')
    {
      //end of stream break loop
      break;
    }
    Serial.print("-");
    Serial.print(tokenBuffer[i]);

  }
  Serial.println(" ");
  
  readTokenBuffer(tokenBuffer);
  //reset input buffer
  bufferIndex = 0;
  inputBuffer[bufferIndex] = '\0';
}

void setup() {
  // put your setup code here, to run once:
  pinMode(12,OUTPUT); //Green pin
  pinMode(11,OUTPUT); //Red pin
  pinMode(LED_BUILTIN, OUTPUT); //Builtin pin

  Serial.begin(9600);
  Serial.println("\nEnter Commands: ");
}
void loop() {
  // setup timer for blink/input independence
  unsigned long currentMillis = millis();
  // calculate a delta time
  if(currentMillis - previousMillis >= blinkInterval){
    previousMillis = currentMillis;
    //for any led's set to blink toggle on and off
    for(int i = 0; i < 2; i++){
      if(lights[i].isBlink){
        toggleLight(&lights[i]);
      }
    }
  }

  // take input serial buffer
  if(Serial.available()>0){
    char incomingChar = Serial.read();
    //check for backspace
    if(incomingChar == 127 && bufferIndex > 0){
      bufferIndex --;
      inputBuffer[bufferIndex] = '\0';
    }
    // check for enter key press
    else if(incomingChar == '\r'){
      processInput();
      }else{
      //make sure we have not exceeded size of inputbuffer
      if(bufferIndex < 50 -1){
        inputBuffer[bufferIndex] = incomingChar;
        bufferIndex++;
        inputBuffer[bufferIndex] = '\0';
      }
    }

    Serial.print("\nInput: ");
    Serial.println(inputBuffer);
  }
}
